O Map<K, V> é uma interface em Java que representa uma coleção de pares chave-valor. É uma das interfaces mais importantes na linguagem Java, e ela faz parte do pacote java.util.

Vamos explicar o Map do zero, incluindo como ele funciona, seus métodos principais e algumas das implementações mais comuns.

1. O que é um Map<K, V>?
K: O tipo da chave (key).
V: O tipo do valor (value).
O Map<K, V> associa uma chave única a um valor. Cada chave no mapa deve ser única, mas diferentes chaves podem mapear para o mesmo valor.

Por exemplo, um dicionário onde as palavras são as chaves e as definições são os valores.

2. Características do Map<K, V>
Chaves únicas: Cada chave em um mapa é única. Ou seja, você não pode ter duas entradas com a mesma chave.
Valores duplicados permitidos: Diferentes chaves podem mapear para o mesmo valor.
Acesso rápido: A principal vantagem de usar um mapa é o acesso rápido ao valor associado a uma chave específica.
3. Principais Implementações de Map em Java
HashMap<K, V>:

Implementação mais comum de Map.
Não garante ordem de inserção.
Usa uma tabela de hash para armazenar as chaves e valores.
Rápido para inserção, remoção e busca (complexidade média de O(1)).
Permite uma chave null e múltiplos valores null.
LinkedHashMap<K, V>:

Similar ao HashMap, mas preserva a ordem de inserção.
Usa uma lista ligada para manter a ordem de inserção das chaves.
Mais lento que o HashMap devido à sobrecarga de manter a ordem de inserção.
TreeMap<K, V>:

Implementação de Map que mantém as chaves em ordem natural ou de acordo com um Comparator fornecido.
Usado quando é necessário garantir que as chaves estão em ordem (por exemplo, ordem crescente).
Implementado usando uma árvore binária de pesquisa balanceada (geralmente uma árvore de Red-Black).
Mais lento que o HashMap e LinkedHashMap para operações básicas (complexidade de O(log n)).
Hashtable<K, V>:

Antiga implementação de Map (mais ou menos substituída pelo HashMap).
Sincronizado (thread-safe), mas mais lento.
Não permite valores null ou chaves null.
4. Operações Básicas de Map<K, V>
Os principais métodos que você pode usar com um Map são:

put(K key, V value): Adiciona um par chave-valor ao mapa. Se a chave já existir, o valor será atualizado.

java
Copiar código
Map<String, Integer> map = new HashMap<>();
map.put("Apple", 1);
map.put("Banana", 2);
System.out.println(map); // Saída: {Apple=1, Banana=2}
get(Object key): Retorna o valor associado à chave especificada. Retorna null se a chave não existir.

java
Copiar código
Integer value = map.get("Apple");
System.out.println(value); // Saída: 1
containsKey(Object key): Verifica se a chave existe no mapa.

java
Copiar código
boolean exists = map.containsKey("Apple");
System.out.println(exists); // Saída: true
containsValue(Object value): Verifica se o valor existe no mapa.

java
Copiar código
boolean existsValue = map.containsValue(2);
System.out.println(existsValue); // Saída: true
remove(Object key): Remove o par chave-valor associado à chave especificada.

java
Copiar código
map.remove("Apple");
System.out.println(map); // Saída: {Banana=2}
size(): Retorna o número de pares chave-valor no mapa.

java
Copiar código
int size = map.size();
System.out.println(size); // Saída: 1
keySet(): Retorna um conjunto (Set) contendo todas as chaves no mapa.

java
Copiar código
Set<String> keys = map.keySet();
System.out.println(keys); // Saída: [Banana]
values(): Retorna uma coleção (Collection) contendo todos os valores no mapa.

java
Copiar código
Collection<Integer> values = map.values();
System.out.println(values); // Saída: [2]
entrySet(): Retorna um conjunto (Set) de entradas (Map.Entry<K, V>), onde cada entrada é um par chave-valor.

java
Copiar código
Set<Map.Entry<String, Integer>> entries = map.entrySet();
for (Map.Entry<String, Integer> entry : entries) {
    System.out.println(entry.getKey() + "=" + entry.getValue());
}
// Saída: Banana=2
5. Exemplo Completo de Uso de Map<K, V>
Aqui está um exemplo de como usar um HashMap para armazenar nomes de estudantes e suas respectivas notas.

java
Copiar código
import java.util.*;

public class ExemploMap {
    public static void main(String[] args) {
        // Criando o mapa
        Map<String, Integer> notas = new HashMap<>();

        // Adicionando chaves e valores
        notas.put("Ana", 85);
        notas.put("João", 92);
        notas.put("Carlos", 78);

        // Verificando a existência de uma chave
        if (notas.containsKey("Ana")) {
            System.out.println("Nota de Ana: " + notas.get("Ana"));
        }

        // Removendo um item
        notas.remove("Carlos");

        // Exibindo todas as chaves e valores
        for (Map.Entry<String, Integer> entry : notas.entrySet()) {
            System.out.println(entry.getKey() + ": " + entry.getValue());
        }

        // Saída:
        // Nota de Ana: 85
        // João: 92
        ```

---

### **6. Comparação entre as Implementações de `Map`**

| **Implementação**        | **Ordenação**                   | **Acesso e operações**              | **Permite `null`** | **Uso comum**                                      |
|--------------------------|---------------------------------|-------------------------------------|-------------------|---------------------------------------------------|
| **`HashMap<K, V>`**       | Não ordenado                   | Rápido, complexo de O(1) para operações básicas | Uma chave e um valor `null` | Uso geral, rápido para inserção e busca           |
| **`LinkedHashMap<K, V>`** | Ordem de inserção preservada   | Rápido, mas um pouco mais lento que o `HashMap` | Uma chave e um valor `null` | Quando é importante manter a ordem de inserção   |
| **`TreeMap<K, V>`**       | Ordenação natural (ou personalizada com `Comparator`) | Mais lento, complexo de O(log n) | Nenhum `null` permitido | Quando a ordem das chaves é importante           |
| **`Hashtable<K, V>`**     | Não ordenado                   | Lento, sincronizado                | Nenhum `null` permitido | Obsoleto, utilizado quando precisa de sincronização entre threads |

---

### **Resumo:**
- **`Map<K, V>`** é uma coleção que armazena pares chave-valor, onde as chaves são únicas.
- As implementações mais comuns são `HashMap`, `LinkedHashMap`, `TreeMap` e `Hashtable`.
- O **`HashMap`** é rápido e ideal para operações básicas, mas não garante ordem.
- O **`TreeMap`** garante que as chaves estejam sempre ordenadas.
- **`LinkedHashMap`** mantém a ordem de inserção.
- O **`Hashtable`** é obsoleto e sincronizado, mas geralmente não é mais usado em novos projetos.

Esses mapas são poderosos para estruturar dados quando você precisa acessar ou associar valores de forma eficiente com chaves únicas.





